{
  "name": "karma-browserifast",
  "description": "Fast browserify for Karma",
  "keywords": [
    "karma-plugin",
    "browserify"
  ],
  "version": "0.6.0",
  "authors": [
    {
      "name": "Jostein Holje",
      "email": "jostein.holje@gmail.com",
      "url": "http://github.com/jstnhlj"
    },
    {
      "name": "Christian Johansen",
      "email": "christian@cjohansen.no",
      "url": "http://cjohansen.no"
    }
  ],
  "scripts": {
    "test": "node run-tests.js"
  },
  "main": "./index.js",
  "license": "BSD",
  "repository": {
    "type": "git",
    "url": "git@github.com:cjohansen/karma-browserifast.git"
  },
  "bugs": {
    "url": "https://github.com/cjohansen/karma-browserifast/issues"
  },
  "dependencies": {
    "watchify": "~0.6",
    "glob": "~3.2",
    "chokidar": "~0.8",
    "convert-source-map": "~0.3.3"
  },
  "devDependencies": {
    "buster-node": "~0.7"
  },
  "peerDependencies": {
    "karma": ">=0.9"
  },
  "readme": "# karma-browserifast\n\n[Browserify](http://browserify.org/) your JavaScript on the fly when testing\nwith [Karma](http://karma-runner.github.io).\n\n## Installation\n\nInstall with npm:\n\n```sh\nnpm install karma-browserifast\n```\n\n## Configuration\n\ntl;dr version:\n\n```js\nmodule.exports = function (karma) {\n    karma.set({\n        frameworks: [\"browserify\"],\n\n        // Files that are to be loaded as globals\n        files: [\n            \"node_modules/es5-shim/es5-shim.js\"\n        ],\n\n        // Files to browserify\n        browserify: {\n            files: [\n                \"test/**/*.js\"\n            ]\n        },\n\n        // Hopefully temporary hack\n        preprocessors: {\n            \"/**/*.browserify\": \"browserify\"\n        }\n\n        // ...\n    });\n};\n```\n\n### Somewhat more elaborate version\n\nAdd `\"browserify\"` to your list of frameworks in `karma.conf`, e.g.:\n\n```js\nframeworks: [\"browserify\"]\n```\n\nAny tests or other files to browserify should not be listed in Karma's `files`\nconfiguration. Instead, use the `browserify` key. This accepts the same list as\n`files`, e.g. filenames as strings, and/or objects with `pattern`, `served`,\n`included` and `watched` properties.\n\n```js\n// Files that are to be loaded as globals\nfiles: [\n    \"node_modules/es5-shim/es5-shim.js\"\n],\n\n// Files to browserify\nbrowserify: {\n    files: [\n        \"test/**/*.js\",\n        { pattern: \"integration/**/*.js\",\n          watched: false }\n    ]\n}\n```\n\nThe last step is a temporary hack that we hope to get rid of very soon:\n\n```js\npreprocessors: {\n    \"/**/*.browserify\": \"browserify\"\n}\n```\n\nWhat is this? karma-browserifast works by adding a file to Karma's list of\nfiles. This file resides in your OS tmp directory, and if you set the log level\nto `karma.LOG_DEBUG`, karma-browserifast will tell you the exact file name. This\nfile is empty, and the above pre-processor provides the content Karma will use.\nThis content is of course the browserified JavaScript.\n\nThe reason for this somewhat elaborate approach is that Karma's `framework` hook\ndoes not wait for asynchronous operations, meaning we can't browserify in this\nhook. The pre-processors however, are asynchronous, thus this hack. We're\ninvestigating how to fix this weirdness.\n\n### Optional configuration options\n\n```js\nbrowserify: {\n    debug: true\n}\n```\n\nAdds sourcemaps to your Browserify bundle.\n\n## File watching\n\nWhen you move files from Karma's list of files to the browserify list, you also\nopt out of Karma's watching feature. Don't worry, karma-browserifast has your\nback. It tells Karma to watch its bundle, and updates this whenever\nyour files change. The Karma `autoWatch` configuration option, as well as\nindividual files configurations (e.g. `watch: true|false`), are respected. If\n`autoWatch` is `true`, dependencies resolved by browserify will be watched in\naddition to files explicitly enumerated.\n\n## Alternatives\n\nThere's also [karma-browserify](https://github.com/xdissent/karma-browserify),\nhowever, we found its performance to be unacceptable as the number of files in\nour project increases. karma-browserify adds a pre-processor that browserifies\nall known files each time a new file is passed to it. This means that for `n`\nfiles, karma-browserify will run `browserify` `n!` times and write to the same\nfile `n` times. This quickly becomes noticably slow.\n\n# BSD 2-clause License\n\nCopyright (c) 2014, Jostein Holje and Christian Johansen\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
  "readmeFilename": "Readme.md",
  "homepage": "https://github.com/cjohansen/karma-browserifast",
  "_id": "karma-browserifast@0.6.0",
  "_shasum": "92d363142a1186a2ca0f7ac86614576c105d6af2",
  "_from": "karma-browserifast@*",
  "_resolved": "https://registry.npmjs.org/karma-browserifast/-/karma-browserifast-0.6.0.tgz"
}
